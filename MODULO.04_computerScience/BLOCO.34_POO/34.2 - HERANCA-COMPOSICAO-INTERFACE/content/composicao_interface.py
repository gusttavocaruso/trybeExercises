# N√≥s falamos l√° em cima que qualquer outra classe de compressor que surgir funcionar√° com nosso c√≥digo! Certo? Observe que, pra isso acontecer, tal classe precisa, necessariamente, implementar a fun√ß√£o .compress() com a mesma assinatura que nossas duas classes atuais.

# O grande risco que temos ao fazer composi√ß√£o √© a classe que passarmos para a outra n√£o ter o mesmo formato que imaginamos! Ou seja: se o nosso novo compressor n√£o tiver uma fun√ß√£o chamada compress que receba o mesmo par√¢metro que definimos, us√°-la dar√° erro. Como podemos garantir que isso nunca acontecer√°? N√≥s podemos fazer um combinado na empresa mas, j√° diria o s√°bio:
# Um combinado que n√£o est√° codado n√£o existe. (Clarice Lispector)

# Como a gente coda um combinado ?! A resposta...? Definindo uma interface!

# Voc√™, ent√£o, dita uma regra: Todo compressor deve ter uma fun√ß√£o chamada compress que receba esse par√¢metro! E como voc√™ faz isso?

from abc import ABC, abstractmethod
import gzip
from zipfile import ZipFile

class Compressor(ABC):
    def __init__(self, filepath='./'):
        self.filepath = filepath

    @abstractmethod
    def compress(self, file_name):
        raise NotImplementedError


class ZipCompressor(Compressor):
    def compress(self, file_name):
        with ZipFile(file_name + '.zip', 'w') as zip_file:
            zip_file.write(file_name)


class GzCompressor(Compressor):
    def compress(self, file_name):
        with open(file_name, 'rb') as content:
            with gzip.open(file_name + '.gz', 'wb') as gzip_file:
                gzip_file.writelines(content)

# Com uma classe abstrata üòé

# Ou seja: todo compressor que for criado precisa ter uma fun√ß√£o compress que receber√° esse par√¢metro espec√≠fico para funcionar!

# Voc√™ usa uma classe abstrata com um m√©todo abstrato para definir uma interface que, atrav√©s de heran√ßa , definir√° o comportamento de todos os compressores futuros, assegurando que sua composi√ß√£o sempre funcionar√°!
