Supondo uma lista com 4 valores num√©ricos:
            *---*---*---*---*
original    | 1 | 2 | 3 | 4 |   posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*


Ao adicionar um novo item, a lista precisa crescer:
            *---*
novo item   | 5 |
            *---*
            *---*---*---*---*
original    | 1 | 2 | 3 | 4 |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*


Uma nova lista √© criada:
            *---*---*---*---*---*---*---*---*
nova        |   |   |   |   |   |   |   |   |    posi√ß√£o na mem√≥ria: 0x1A
            *---*---*---*---*---*---*---*---*


Os elementos da lista original s√£o copiados para a nova lista:
            *---*---*---*---*
original    | 1 | 2 | 3 | 4 |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*
              ‚Üì   ‚Üì   ‚Üì   ‚Üì
            *---*---*---*---*---*---*---*---*
nova        | 1 | 2 | 3 | 4 |   |   |   |   |    posi√ß√£o na mem√≥ria: 0x1A
            *---*---*---*---*---*---*---*---*


O novo elemento √© colocado na nova lista:
            *---*
novo item   | 5 | -------------
            *---*             ‚Üì
            *---*---*---*---*---*---*---*---*
nova        | 1 | 2 | 3 | 4 |   |   |   |   |    posi√ß√£o na mem√≥ria: 0x1A
            *---*---*---*---*---*---*---*---*


O endere√ßo onde se encontrava a lista antiga √© liberado para ser utilizado
e o "nome original" √© atribu√≠do a nova lista:
            *---*---*---*---*---*---*---*---*
original    | 1 | 2 | 3 | 4 | 5 |   |   |   |    posi√ß√£o na mem√≥ria: 0x1A
            *---*---*---*---*---*---*---*---*


Essa organiza√ß√£o em espa√ßos cont√≠nuos em mem√≥ria torna o acesso a √≠ndices muito eficiente, pois basta pegar o endere√ßo em mem√≥ria do primeiro elemento e somar ao √≠ndice, multiplicando pelo tamanho do tipo armazenado e teremos o valor daquela posi√ß√£o. Posso ter dez, cem ou mil itens que o tempo para acessar o valor pelo √≠ndice ser√° o mesmo.

üí° A decis√£o por criar uma nova lista e copiar os valores parece esquisita a primeira vista, mas a opera√ß√£o de realoca√ß√£o tem um custo muito muito grande, explicando assim esta decis√£o.


Quando inserimos um novo elemento no in√≠cio do array, todos os elementos j√° existentes s√£o deslocados √† direita, tendo seu √≠ndice modificado em 1. An√°logo a isto, quando adicionamos em uma posi√ß√£o intermedi√°ria, todos os elementos com √≠ndices posteriores ao inserido ser√£o movidos em uma posi√ß√£o.



Supondo uma lista com 4 caracteres ao qual adicionaremos mais um no in√≠cio:
            *---*
novo item   | a |
            *---*
              ‚Üì
            *---*---*---*---*
original    | b | c | d |   |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*
                ‚§ª  ‚§ª  ‚§ª

Os elementos s√£o deslocados para o pr√≥ximo √≠ndice.

            *---*---*---*---*
original    | a | b | c | d |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*


As regras de crescimento ainda se aplicam portanto pode ser que uma nova lista
seja criada, o elemento adicionado e os elementos copiados para a nova lista.
Ainda assim, o √≠ndice de todos os elementos posteriores a inser√ß√£o
ser√£o acrescidos em 1.



Supondo uma lista com 3 caracteres ao qual adicionaremos mais um na segunda posi√ß√£o, vulgo √≠ndice 1:
(inserimos b na posi√ß√£o 1).

                *---*
novo item       | b |
                *---*
                  ‚Üì
            *---*---*---*---*
original    | a | c | d |   |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*
                    ‚§ª  ‚§ª

O resultado final seria:
            *---*---*---*---*
original    | a | b | c | d |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*



Supondo uma lista com 4 caracteres ao qual removeremos um elemento

Se removermos o √∫ltimo elemento (√≠ndice 3), nada precisa ser modificado

         *---*---*---*---*
array    | a | b | c |   |    posi√ß√£o na mem√≥ria: 0x01
         *---*---*---*-‚§π-*
                        d

Por√©m se removermos o primeiro, ou qualquer outro √≠ndice,
todos os valores ser√£o deslocados √† esquerda:
                 ‚§∫  ‚§∫  ‚§∫
         *---*---*---*---*---*---*---*---*
array    | a |   | c | d | e |   |   |   |    posi√ß√£o na mem√≥ria: 0x01
         *---*-‚§π-*---*---*---*---*---*---*
                b

√Ä medida que itens s√£o removidos, a estrutura diminui em tamanho:
         *---*---*---*---*
array    | a | c | d | e |    posi√ß√£o na mem√≥ria: 0x01
         *---*---*---*---*
